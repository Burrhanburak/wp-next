generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum MessageStatus {
  PENDING
  SCHEDULED
  SENT
  FAILED
  DELIVERED
  READ
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  expires     DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  callbackUrl String?

  @@index([userId])
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  phone    String? @unique
  image    String? @default("/images/default-user.jpg")

  role                         UserRole               @default(USER)
  emailVerified                Boolean?               @default(false)
  emailVerifiedAt              DateTime?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  isTwoFactorEnabled           Boolean                @default(false)
  twoFactorConfirmation        TwoFactorConfirmation?
  credits                      Int                    @default(0)
  packageId                    String?
  package                      Package?               @relation(fields: [packageId], references: [id])
  accounts                     Account[]
  sessions                     Session[]
  contacts                     Contact[]
  messages                     Message[]
  messageTemplates             MessageTemplate[]
  templates                    Template[]
  activities                   UserActivity[]
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Admin {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  name     String?
  phone    String?  @unique
  role     UserRole @default(ADMIN)
  firebaseUid String   @unique
  // İkincil doğrulama
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String? // Google Auth secret
  backupCodes      String[] @default([]) // Yedek kodlar

  // İlişkiler
  smsVerificationEnabled Boolean @default(false)
  smsVerifications SmsVerification[]
  logs             AdminLog[]
  securityLogs     SecurityLog[]
  sessions         AdminSession[]
  verifications    AdminVerification[]
  loginAttempts    LoginAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  details   String?
  ip        String?
  createdAt DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
}

model AdminSession {
  id        String   @id @default(cuid())
  adminId   String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model AdminVerification {
  id         String    @id @default(cuid())
  adminId    String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  ip        String
  userId    String?
  success   Boolean
  details   String?
  createdAt DateTime @default(now())

  admin Admin? @relation(fields: [userId], references: [id])

  @@index([ip])
  @@index([userId])
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  ip        String?
  details   String?
  createdAt DateTime @default(now())

  admin Admin? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
}

model Package {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  credits     Int
  features    String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  name        String
  phoneNumber String
  email       String?
  tags        String[]
  notes       String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Message {
  id                String           @id @default(cuid())
  content           String
  recipientName     String
  recipientPhone    String
  status            MessageStatus    @default(PENDING)
  error             String?
  userId            String
  contactId         String?
  messageTemplateId String?
  templateId        String?
  scheduledAt       DateTime?
  sentAt            DateTime?
  failureReason     String?
  retryCount        Int              @default(0)
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact           Contact?         @relation(fields: [contactId], references: [id])
  messageTemplate   MessageTemplate? @relation(fields: [messageTemplateId], references: [id])
  template          Template?        @relation(fields: [templateId], references: [id])
}

model MessageTemplate {
  id        String    @id @default(cuid())
  name      String
  content   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Template {
  id        String    @id @default(cuid())
  name      String
  content   String
  userId    String
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model NotificationTemplate {
  id        String   @id @default(cuid())
  name      String
  content   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([ip])
}

model SmsVerification {
  id             String   @id @default(cuid())
  phoneNumber    String
  verificationId String   @unique
  code           String?
  verified       Boolean  @default(false)
  attempts       Int      @default(0)
  expiresAt      DateTime
  adminId        String?
  admin          Admin?   @relation(fields: [adminId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([phoneNumber])
  @@index([adminId])
}
